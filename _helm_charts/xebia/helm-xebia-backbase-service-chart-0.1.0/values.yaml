# Global values: Local values have precedence and mergeOverwrite globals
global:
  # -- Configures the web-authentication chart name
  chartName: web-authentication
  # -- global.chartName configures the legalentity-integration-service chart name
  imagePullSecrets:
   - name: "regcred"

  # Configures the service
  app:
    # -- Configures additional `app.backbase.com/key: value` labels for deployments
    metadata:
      # -- The general product the service is a member of
      tier: identity
      # -- Access level of the application
      public: true
    # -- Configures which docker image to use
    image:
      # -- The docker repository for this application
      registry: "repo.backbase.com/backbase-docker-releases"
      # -- The docker repository tag for this deployment
      repository: web-authentication
      # -- The docker image tag for this application
      tag: "2022.08.5-LTS"

  # Key-value pairs representing environment variables for application container
  # ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  # it is possible to use templates as value here (will be evaluated using tpl function)
  env:
    # Disable Eureka Discovery Client
    "EUREKA_CLIENT_ENABLED": "true"
    # Enable Kubernetes Discovery Client
    "SPRING_CLOUD_KUBERNETES_ENABLED": "false"
    # Set load balancer server list with ip of pod or service name. default value is POD
    "SPRING_CLOUD_KUBERNETES_LOADBALANCER_MODE": "SERVICE"
    "SIG_SECRET_KEY": "JWTSecretKeyDontUseInProduction!"
    "USERCTX_KEY": "JWTSecretKeyDontUseInProduction!"
    "EXTERNAL_ENC_SECRET_KEY": "JWTEncKeyDontUseInProduction666!"
    "backbase-env-jwt": "JWTEncKeyDontUseInProduction666!"
    # SpEL expression that will evaluate whether to include a service in gateway integration or not
    # Defaults to metadata.get('public') which only works with Eureka setup
    "spring.cloud.gateway.discovery.locator.include-expression": "true"
    # Only the services matching these labels will be fetched from the Kubernetes API server
    # "app.backbase.com/public:true" is set by services which need to be public.
    "SPRING_APPLICATION_JSON": "{ \"spring.cloud.kubernetes.discovery.service-labels.[app.backbase.com/public]\": \"true\" }"

  # Database stuff
  database:
    # -- If enabled - will set corresponding database environment variables:
    # `SPRING_DATASOURCE_URL, SPRING_DATASOURCE_USERNAME, SPRING_DATASOURCE_PASSWORD, SPRING_DATASOURCE_DRIVER_CLASS_NAME`
    enabled: true
    # -- Database username
    username: backbase
    # -- Database password.  Will be used if `existingSecret` not specified
    password: "CHANGEME"
    # -- Name of external kubernetes secret with database values
    existingSecret: ""
    # -- Data key in existing kubernetes secret to reference as `SPRING_DATASOURCE_PASSWORD` value
    existingSecretKey: "backbase-env-mysql"
    # -- Database type.  Supported values: mysql / mariadb / oracle / mssql
    type: mysql
    # -- Database host
    host: 10.121.192.5
    # -- Database port
    port: 3306
    # -- JDBC URL database parameters
    parameters:
      # -- MySQL JDBC URL database parameters to be appended to the end of the URL.  Should begin with a parameter separator.
      mysql: "backbase"

  # JMS/ActiveMQ stuff
  activemq:
    # -- If enabled - will set corresponding JMS/ActiveMQ environment variables:
    # `SPRING_ACTIVEMQ_BROKER_URL, SPRING_ACTIVEMQ_USER, SPRING_ACTIVEMQ_PASSWORD`
    enabled: true

    # -- ActiveMQ username
    username: "admin"

    # -- ActiveMQ password.  Will be used if `existingSecret` not specified
    password: "admin"

    # -- Name of external kubernetes secret with activemq values
    #existingSecret: ""

    # -- data key in existing kubernetes secret to reference as `SPRING_ACTIVEMQ_PASSWORD` value
    existingSecretKey: "ACTIVEMQ_PASSWORD"

    # -- ActiveMQ host
    host: "activemq-activemq-classic"

    # -- Custom URL template.  Template must reference values in `.activemq` scope: `tcp://{{.activemq.host}}:{{.activemq.port}}`
    urlTemplate: ""

    # -- ActiveMQ JMS port
    port: 61616

    # -- if enabled - an `initContainer` with activemq check will be added to Pod
    checkEnabled: false

    # -- Type of check - `curl` / `netcat` / `nslookup`
    checkType: netcat

    # -- Container Image to use for the check type as specified by checkType
    checkInitContainerImage: busybox
    # -- initContainer memory allocation set for limit and requests
    checkInitContainerMemory: 100Mi
    # -- initContainer CPU allocation set for limit and requests
    checkInitContainerCpu: 100m

  # Use this to map default JMS/ActiveMQ environment variable names to custom ones
  # For example this will set `MY_BROKER_URL` instead of `SPRING_ACTIVEMQ_BROKER_URL`:
  #   activemqEnvVarsMap:
  #    URL: "MY_BROKER_URL"
  activemqEnvVarsMap:
    # -- Active MQ Broker URL environment variable name
    URL: "SPRING_ACTIVEMQ_BROKER_URL"

    # -- Active MQ Broker username environment variable name
    USERNAME: "SPRING_ACTIVEMQ_USER"

    # -- Active MQ Broker password environment variable name
    PASSWORD: "SPRING_ACTIVEMQ_PASSWORD"

  # Netflix Eureka service discovery registry configuration
  registry:
    # -- If enabled - `registry.envVarNameDefaultZone` environment variable will be set for Pod based on protocol/host/port/path values:
    # `protocol://host:port/path`
    enabled: true

    # -- Will set [eureka.instance.preferIpAddress](https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-eureka-server.html#spring-cloud-eureka-server-prefer-ip-address) environment variable to true
    preferIpAddress: true

    # -- This name will be used in the environment variable to publish the prefer ip address.
    envVarNamePreferIpAddress: EUREKA_INSTANCE_PREFERIPADDRESS

    # -- This name will be used to publish the environment variable for the default zone.
    envVarNameDefaultZone: eureka.client.serviceUrl.defaultZone

    # -- protocol - http or https
    protocol: http

    # -- registry host
    host: registry-backbase-application

    # -- registry port
    port: 8080

    # -- registry base path
    path: /eureka/

    # -- if enabled - an `initContainer` with registry check will be added to Pod
    checkEnabled: false

    # -- Type of check - curl / netcat / nslookup
    checkType: curl

    # -- Container Image to use for the check type as specified by checkType
    checkInitContainerImage: byrnedo/alpine-curl
    # -- initContainer memory allocation set for limit and requests
    checkInitContainerMemory: 200Mi
    # -- initContainer CPU allocation set for limit and requests
    checkInitContainerCpu: 100m

  # -- Kubernetes service
  service:
    # -- If enabled, will create a Kubernetes service resource for this deployment
    enabled: true

    # -- how the [Service is published](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
    type: NodePort

    # -- which port to listen to
    port: 8080

    # -- name of the listening port
    portName: http

    # -- target port of the downstream backends servicing the actual request
    targetPort: http
  
  # -- Kubernetes Ingress
  ingress:
    # -- If set FQDN will be constructed like host.baseDomain
    baseDomain: ""

    # -- Global annotations
    annotations: 
      kubernetes.io/ingress.class: gce

  # JWT variables for application pod
  jwt:
    # -- If enabled, sets JWT-related environment variables
    enabled: false
    # -- name of external kubernetes secret containing the jwt values
    existingSecret: "backbase-env-jwt"
    # -- will set the variable SIG_SECRET_KEY with the value from the secret jwt-internal-secretkey secret key
    SIG_SECRET_KEY_fromSecret: true
    # -- will set the variable USERCTX_KEY with the value from the userctx-key secret key
    USERCTX_KEY_fromSecret: true

# Kubernetes Service
webauthentication:
  # -- If enabled, will create a Kubernetes Service resource for this deployment
  enabled: true

  # Configures metadata and images of the app to be deployed.
  app:
    # -- Name of the application
    name: webauthentication

    # -- Configures the kubernetes resource requests and limits for the deployment
    resources:
      # -- Container memory resources
      memory:
        # -- (int) Amount of container memory resource to request (in Mi unit)
        # this results in a Kubernetes memory resource request on the Pod defintion
        ram: 768

  # -- Add an emptyDir volume called the tmp-dir.
  volumes:
      # directory name
    - name: tmp-dir
      # empty directory
      emptyDir: { }
  # -- Mount the temp-dir to the /tmp
  volumeMounts:
      # directory name
    - name: tmp-dir
      # mount path
      mountPath: /tmp # mount path
  # -- set the access to the filesystem to read only.
  securityContext:
    # read only root file system
    readOnlyRootFilesystem: true

  # Activemq :JMS/ActiveMQ Settings
  activemq:
    # -- If enabled - will set corresponding JMS/ActiveMQ environment variables:
    # `SPRING_ACTIVEMQ_BROKER_URL, SPRING_ACTIVEMQ_USER, SPRING_ACTIVEMQ_PASSWORD`
    enabled: true

  # Kubernetes service
  service:
    # -- name of the Kubernetes Service.  If not specified, this chart will generate a name by convention
    nameOverride: web-authentication

# Kubernetes Ingress configuration.  Also see `global.ingress`
ingress:
  # -- If true, configures a Kubernetes Ingress resource for this deployment
  enabled: true

  # -- Annotations to apply to the Ingress resource
  annotations: {}
    # kubernetes.io/ingress.class: nginx

  # -- Defines the routes for the hosts managed by this ingress.  The Service generated by this deployment will be used as the Backend.
  hosts:
    # -- If `global.ingress.baseDomain` is set - host field represent host part of FQDN
    - host: backbase.local
      # -- Kubernetes Ingress path definitions.  The Service generated by this deployment will be used as the Backend for each path specified here.
      paths: []
      # -- Custom paths to prepend to every host configuration.
      # This is useful when working with annotation based services.
      # - path: /*
      #   backend:
      #     serviceName: ssl-redirect
      #     servicePort: use-annotation
      customPaths: []
